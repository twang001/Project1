{
	"name": "samplejsonflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "samplejson",
						"type": "DatasetReference"
					},
					"name": "samplejson"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "samplejsonoutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          feeds as (code as boolean, commentCount as short, createdAt as string, description as string, feedsComment as string, id as short, imagePaths as string, images as string, isdeleted as boolean, lat as boolean, likeDislike as (dislikes as short, likes as short, userAction as short), lng as boolean, location as string, mediatype as boolean, msg as string, multiMedia as (createAt as string, description as string, id as short, likeCount as boolean, mediatype as short, name as string, place as string, url as string)[], name as string, profilePicture as string, title as string, userId as short, videoUrl as string)[],",
				"          totalFeed as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> samplejson",
				"samplejson select(mapColumn(",
				"          feeds",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select1",
				"Select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Output.json'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          feedsID = {feeds.id},",
				"          Mediaid = {feeds.multiMedia.id}",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}