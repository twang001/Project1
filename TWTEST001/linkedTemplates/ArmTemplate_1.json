{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "TWTEST001"
		},
		"storageeventtrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/5e115213-f9c8-4c49-b57e-ff9a0647c4ac/resourceGroups/ThomasADFParctice/providers/Microsoft.Storage/storageAccounts/twstoragetrigger"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/storageeventtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/triggertest/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('storageeventtrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCDType2_SAP_Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SAP_Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SQLDB_StagingTmpTables",
								"type": "DatasetReference"
							},
							"name": "TemporaryStagingData"
						},
						{
							"dataset": {
								"referenceName": "ds_SQLDB_StagingTables",
								"type": "DatasetReference"
							},
							"name": "StagingData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SQLDB_StagingTables",
								"type": "DatasetReference"
							},
							"name": "StagingDataSink"
						}
					],
					"transformations": [
						{
							"name": "NewAndUpdatedRows"
						},
						{
							"name": "AddHashInput"
						},
						{
							"name": "AddHashExisting"
						},
						{
							"name": "GetMaxSurrogateKey"
						},
						{
							"name": "AddKey"
						},
						{
							"name": "JoinWithMaxSurrogateKey"
						},
						{
							"name": "AddDimensionColumns"
						},
						{
							"name": "FilterForUpdatedValues"
						},
						{
							"name": "UpdateObsolete"
						},
						{
							"name": "DropUnwantedColsInput"
						},
						{
							"name": "UnionAllData"
						},
						{
							"name": "MarkAsUpdate"
						},
						{
							"name": "DropUnwantedColumns"
						},
						{
							"name": "MarkAsInsert"
						},
						{
							"name": "FilterForActive"
						}
					],
					"script": "parameters{\n\tPrimaryKey as string,\n\tColumns as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TemporaryStagingData\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingData\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewAndUpdatedRows\nTemporaryStagingData derive(id_hash = md5(byNames(split($PrimaryKey,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashInput\nFilterForActive derive(id_hash = md5(byNames(split($PrimaryKey,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashExisting\nAddHashExisting aggregate(MaxSurrogateKey = max(toInteger(byName('Key')))) ~> GetMaxSurrogateKey\nNewAndUpdatedRows keyGenerate(output(Key as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> AddKey\nAddKey, GetMaxSurrogateKey join(Key == MaxSurrogateKey || true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithMaxSurrogateKey\nJoinWithMaxSurrogateKey derive(Key = Key + iifNull(MaxSurrogateKey, 0),\n\t\tRowCurrentFlag = 'Y',\n\t\tRowInsertTimeStamp = currentTimestamp(),\n\t\tRowEndDate = toTimestamp('9999-12-31 00:00:00', 'yyyy-MM-dd HH:mm:ss'),\n\t\tUpdateFlag = 'N',\n\t\tRowUpdateTimeStamp = toTimestamp(toString(null()))) ~> AddDimensionColumns\nAddHashExisting, NewAndUpdatedRows exists(AddHashExisting@id_hash == AddHashInput@id_hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> FilterForUpdatedValues\nFilterForUpdatedValues derive(RowCurrentFlag = 'N',\n\t\tRowEndDate = currentTimestamp()) ~> UpdateObsolete\nAddDimensionColumns select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColsInput\nMarkAsInsert, DropUnwantedColumns union(byName: true)~> UnionAllData\nUpdateObsolete alterRow(updateIf(true())) ~> MarkAsUpdate\nMarkAsUpdate select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nDropUnwantedColsInput alterRow(insertIf(true())) ~> MarkAsInsert\nStagingData filter(toString(byName('RowCurrentFlag')) == 'Y') ~> FilterForActive\nUnionAllData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Key'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> StagingDataSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Dataflow_SAP_TmpStg_To_Stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Slowly Change Dimension Type 2 Implementation for SAP data between Temporary Staging tables and Staging Tables in Azure SQL Database",
				"activities": [
					{
						"name": "SCD Type2 Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SCDType2_SAP_Data",
								"type": "DataFlowReference",
								"parameters": {
									"PrimaryKey": {
										"value": "'@{pipeline().parameters.PrimaryKey}'",
										"type": "Expression"
									},
									"Columns": {
										"value": "'@{pipeline().parameters.ColumnNames}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TemporaryStagingData": {
										"TmpStg_Schema": {
											"value": "@pipeline().parameters.TemporaryStagingSchema",
											"type": "Expression"
										},
										"TmpStg_Table": {
											"value": "@pipeline().parameters.TemporaryStagingTable",
											"type": "Expression"
										}
									},
									"StagingData": {
										"Stg_Table": {
											"value": "@pipeline().parameters.StagingTable",
											"type": "Expression"
										},
										"Stg_Schema": {
											"value": "@pipeline().parameters.StagingSchema",
											"type": "Expression"
										}
									},
									"StagingDataSink": {
										"Stg_Table": {
											"value": "@pipeline().parameters.StagingTable",
											"type": "Expression"
										},
										"Stg_Schema": {
											"value": "@pipeline().parameters.StagingSchema",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureManagedIntegrationRuntime-prod-04",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Truncate Tmp Stg table",
						"description": "Delete all rows from Temporary Staging table after successfully loading data in corresponding staging table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SCD Type2 Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg_history].[TruncateTable]",
							"storedProcedureParameters": {
								"tableName": {
									"value": {
										"value": "@pipeline().parameters.TemporaryStagingTable",
										"type": "Expression"
									},
									"type": "String"
								},
								"schemaName": {
									"value": {
										"value": "@pipeline().parameters.TemporaryStagingSchema",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 10,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StagingTable": {
						"type": "string"
					},
					"PrimaryKey": {
						"type": "string"
					},
					"ColumnNames": {
						"type": "string"
					},
					"TemporaryStagingTable": {
						"type": "string"
					},
					"TemporaryStagingSchema": {
						"type": "string"
					},
					"StagingSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SAP_Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-02T04:51:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SCDType2_SAP_Data')]"
			]
		}
	]
}