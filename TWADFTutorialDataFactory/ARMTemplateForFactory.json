{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "TWADFTutorialDataFactory"
		},
		"ADLSGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSGen2'"
		},
		"AzureBlobStorageAuthenticationKey_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageAuthenticationKey'"
		},
		"AzureSQLDB_SELFHOSTIR_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSQLDB_SELFHOSTIR'"
		},
		"AzureSQLDBwithexpression_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSQLDBwithexpression'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().server};Initial Catalog=@{linkedService().database};User ID=@{linkedService().user};Password=@{linkedService().pw}"
		},
		"AzureSqlDatabaseLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedService'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=twadfpractice.database.windows.net;Initial Catalog=Practice001"
		},
		"AzureStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureStorageLinkedService'"
		},
		"AzureSynapseAnalytics_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		},
		"DataMovementLabAzureSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DataMovementLabAzureSQL'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=twadfpractice.database.windows.net;Initial Catalog=Practice001;User ID=SSISUser"
		},
		"HDILabBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'HDILabBlobStorage'"
		},
		"LocalSQLPractice2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LocalSQLPractice2'"
		},
		"PrivateEndpoint_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PrivateEndpoint'"
		},
		"SELFHOSTNODE1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SELFHOSTNODE1'"
		},
		"SELFHOSTNODE1_AdventureWorksDW2016_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SELFHOSTNODE1_AdventureWorksDW2016'"
		},
		"SapTable1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SapTable1'"
		},
		"Sftp1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp1'"
		},
		"SqlServerLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerLinkedService'"
		},
		"datalakestorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'datalakestorage'"
		},
		"twadfpracticestorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'twadfpracticestorage2'"
		},
		"ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://twadfpracticestorage.dfs.core.windows.net"
		},
		"AzureBlobStorage1_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "BlobSAS"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://TWKV.vault.azure.net/"
		},
		"DataMovementLabBlobStorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://twadfpracticestorage.blob.core.windows.net"
		},
		"LS_insight_ADLS_DMZ_Legacy_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().Account}"
		},
		"LS_insight_ADLS_Data_Transfer_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://19251001devinsightxfer01.dfs.core.windows.net"
		},
		"New REST_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": " https://api.anaplan.com/2/0/workspaces/8a81b0946181ceb301619fb619445643/models/4B938EEE5E9A43AC8D4AB3A156600FB9/files/116000000055/chunks/0"
		},
		"SapTable1_properties_typeProperties_clientId": {
			"type": "string",
			"defaultValue": "11111"
		},
		"SapTable1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "1111"
		},
		"SapTable1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "1111"
		},
		"SapTable1_properties_typeProperties_systemNumber": {
			"type": "string",
			"defaultValue": "1111"
		},
		"Sftp1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "1111"
		},
		"Sftp1_properties_typeProperties_hostKeyFingerprint": {
			"type": "string",
			"defaultValue": "111"
		},
		"Sftp1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "111"
		},
		"TEST_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://redcap.petermac.org.au/api/"
		},
		"datalakestorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://twdatalakeaccount.dfs.core.windows.net"
		},
		"twadfpracticestorage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://twadfpracticestorage.blob.core.windows.net"
		},
		"Tumbling_properties_pipeline_parameters_GetTime": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"AzureSqlDatabase278-serverless_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5e115213-f9c8-4c49-b57e-ff9a0647c4ac/resourceGroups/synapseworkspace-managedrg-89c41f9a-9d1b-4791-a055-34305bdf81e8/providers/Microsoft.Sql/servers/syntest-tw001"
		},
		"AzureSqlDatabase278-serverless_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"Private1_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5e115213-f9c8-4c49-b57e-ff9a0647c4ac/resourceGroups/ThomasADFParctice/providers/Microsoft.Storage/storageAccounts/privatet1"
		},
		"Private1_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"Private1_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"privatet1.blob.core.windows.net"
			]
		},
		"TWTEST001_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5e115213-f9c8-4c49-b57e-ff9a0647c4ac/resourceGroups/ThomasADFParctice/providers/Microsoft.KeyVault/vaults/TWTEST001"
		},
		"TWTEST001_properties_groupId": {
			"type": "string",
			"defaultValue": "vault"
		},
		"TWTEST001_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"twtest001.vaultcore.azure.net"
			]
		},
		"twadfpracticeprivatepoint_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/5e115213-f9c8-4c49-b57e-ff9a0647c4ac/resourceGroups/ThomasADFParctice/providers/Microsoft.Sql/servers/twadfpractice"
		},
		"twadfpracticeprivatepoint_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"twadfpracticeprivatepoint_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"twadfpractice.database.windows.net"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SimpleCopy"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T02:15:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary1')]",
				"[concat(variables('factoryId'), '/datasets/Binary2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromBlobToSql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "--TRUNCATE TABLE [dbo].[emp]",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SimpleCopy"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T02:15:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToSqlPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromBlobToSqlPipeline",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SimpleCopy"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T02:15:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyJsonfilefromBlobtoAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopydatafromJson",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "input//jsonfilewithhierarchy-100.json"
							},
							{
								"name": "Destination",
								"value": "."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['firstName']"
										},
										"sink": {
											"name": "firstName"
										}
									},
									{
										"source": {
											"path": "[['lastName']"
										},
										"sink": {
											"name": "lastName"
										}
									},
									{
										"source": {
											"path": "[['gender']"
										},
										"sink": {
											"name": "gender"
										}
									},
									{
										"source": {
											"path": "[['age']"
										},
										"sink": {
											"name": "age"
										}
									},
									{
										"source": {
											"path": "[['number']"
										},
										"sink": {
											"name": "number"
										}
									}
								],
								"collectionReference": "$['people']"
							}
						},
						"inputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SimpleCopy"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T02:15:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorHandling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ErrorHandling",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ErrorHandling",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"AzureSQLDBTable": {},
									"BadRows": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlowTransformation"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-05T02:41:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ErrorHandling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HAonSelfIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HAonSelfIR",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobStorage_Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "HAonSelfIR"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-05T02:41:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLDB')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobStorage_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementallyCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from watermarktable ( NOLOCK )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table ( NOLOCK )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "data_source_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopyActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * \n   from data_source_table ( NOLOCK )\n  where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "data_source_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "incrementalcopy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopyActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SELFHOSTNODE1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "incrementalcopy"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-05T03:38:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/data_source_table')]",
				"[concat(variables('factoryId'), '/datasets/incrementalcopy')]",
				"[concat(variables('factoryId'), '/linkedServices/SELFHOSTNODE1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lab1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Movement Lab",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerKey",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "GeographyKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "GeographyKey",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CustomerAlternateKey",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerAlternateKey",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "NameStyle",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "BirthDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "BirthDate",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MaritalStatus",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "MaritalStatus",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "YearlyIncome",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "YearlyIncome",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TotalChildren",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "TotalChildren",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "NumberChildrenAtHome",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "NumberChildrenAtHome",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EnglishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EnglishEducation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SpanishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpanishEducation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FrenchEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FrenchEducation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EnglishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EnglishOccupation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SpanishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpanishOccupation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FrenchOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FrenchOccupation",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "HouseOwnerFlag",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "HouseOwnerFlag",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "NumberCarsOwned",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "NumberCarsOwned",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Phone",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DateFirstPurchase",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DateFirstPurchase",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CommuteDistance",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CommuteDistance",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLPracticeDBDimCustomer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataMovementLabBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Movement Lab"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-09T09:37:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLPracticeDBDimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DataMovementLabBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParametersExpressionsLab1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParametersExpressionsLab",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "test",
							"value": {
								"value": "@activity( 'Get Metadata1' ).output.lastModified",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ParametersExpressionsLab"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-02T07:26:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParametersExpressionsLab')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParametersExpressionsLab2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ParametersExpressionsLab2Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParametersExpressionsLab2Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@{pipeline().TriggerTime}.zip",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ParametersExpressionsLab"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-02T07:26:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParametersExpressionsLab2Source')]",
				"[concat(variables('factoryId'), '/datasets/ParametersExpressionsLab2Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerQuery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AzureSQLPracticeDBDimCustomerpowerquery",
								"type": "DataFlowReference",
								"datasetParameters": {
									"AzureSQLPracticeDBDimCustomer": {},
									"SinkPowerQueryBlobStorage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "SinkPowerQueryBlobStorage",
											"dataset": {
												"referenceName": "PowerQueryBlobStorage",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkPowerQueryBlobStorage"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlowTransformation"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-28T03:58:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AzureSQLPracticeDBDimCustomerpowerquery')]",
				"[concat(variables('factoryId'), '/datasets/PowerQueryBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServerToBlobPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopySqlServerToAzureBlobActivity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SimpleCopy"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T02:15:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerDataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Synapse Test Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data Test",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_INSIGHT_ADLS_LegacyBlob",
								"type": "DatasetReference",
								"parameters": {
									"Container": "dmz-ofpm",
									"Account": "https://19251001devinsightdmz.dfs.core.windows.net"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_INSIGHT_ADLS_BinaryFolder",
								"type": "DatasetReference",
								"parameters": {
									"Folder": "testfiles"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ErrorOutput": {
						"type": "String"
					},
					"MailErr_LA0_01_EndPoint": {
						"type": "String",
						"defaultValue": "https://prod-11.australiaeast.logic.azure.com:443/workflows/0aeecb88af7f4db9822ea207c008a1f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=HHcqxnCZMiynIM-3GoBieAvtr4fKtWvKTAZw6eUsqes"
					},
					"LastModified": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-23T06:42:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_INSIGHT_ADLS_LegacyBlob')]",
				"[concat(variables('factoryId'), '/datasets/DS_INSIGHT_ADLS_BinaryFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlobDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlobDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TransformMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransformMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"Sink": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DataFlowTransformation"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-05T02:41:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TransformMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerLab')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerTime",
							"value": {
								"value": "@pipeline().parameters.GetTime",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"GetTime": {
						"type": "string"
					}
				},
				"variables": {
					"TriggerTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TriggerLab"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-07T07:57:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UntilActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LastID_Lookup_AC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT LASTID \n  FROM [dbo].[IDLookup] ( NOLOCK )\n WHERE TABLENAME = 'DIMCUSTOMER'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set_LastID_AC",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastID_Lookup_AC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastID",
							"value": {
								"value": "@string(activity('LastID_Lookup_AC').output.firstRow.LastID)\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Init_Sync_AC",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT * \n  FROM [dbo].[DimCustomer] ( NOLOCK )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [dbo].[DimCustomer]",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "GeographyKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "GeographyKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerAlternateKey",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerAlternateKey",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "BirthDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "BirthDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "MaritalStatus",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "MaritalStatus",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "YearlyIncome",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "YearlyIncome",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "TotalChildren",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "TotalChildren",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "NumberChildrenAtHome",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "NumberChildrenAtHome",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "EnglishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EnglishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SpanishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpanishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FrenchEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FrenchEducation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EnglishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EnglishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SpanishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpanishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FrenchOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FrenchOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "HouseOwnerFlag",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "HouseOwnerFlag",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"name": "NumberCarsOwned",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "NumberCarsOwned",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DateFirstPurchase",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DateFirstPurchase",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CommuteDistance",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CommuteDistance",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SELFHOSTNODE1_DIMCUSTOMER",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLPracticeDBDimCustomer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Until_AC",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set_LastID_AC",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Init_Sync_AC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(variables('CurrentID')),int(variables('LastID')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetCurrentID_AC",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT MAX([CustomerKey]) AS CurrentId FROM [dbo].[DimCustomer] ( NOLOCK )",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SELFHOSTNODE1_DIMCUSTOMER",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SetCurrentID_AC",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetCurrentID_AC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CurrentID",
										"value": {
											"value": "@string(activity('GetCurrentID_AC').output.firstRow.CurrentId)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait_AC",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "SetCurrentID_AC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Ciopt_Delta_AC",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until_AC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_GetDeltaFromDimCustomer]",
								"storedProcedureParameters": {
									"LastID": {
										"type": "Int32",
										"value": {
											"value": "@int(variables('LastID'))",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [dbo].[DimCustomer]",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "GeographyKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "GeographyKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerAlternateKey",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CustomerAlternateKey",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										}
									},
									{
										"source": {
											"name": "BirthDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "BirthDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "MaritalStatus",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "MaritalStatus",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "YearlyIncome",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "YearlyIncome",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "TotalChildren",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "TotalChildren",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "NumberChildrenAtHome",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "NumberChildrenAtHome",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "EnglishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EnglishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SpanishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpanishEducation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FrenchEducation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FrenchEducation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EnglishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EnglishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SpanishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpanishOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FrenchOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FrenchOccupation",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "HouseOwnerFlag",
											"type": "String",
											"physicalType": "nchar"
										},
										"sink": {
											"name": "HouseOwnerFlag",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"name": "NumberCarsOwned",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "NumberCarsOwned",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									},
									{
										"source": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DateFirstPurchase",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DateFirstPurchase",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CommuteDistance",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CommuteDistance",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SELFHOSTNODE1_DIMCUSTOMER",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLPracticeDBDimCustomer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SP_StoreLastID_AC",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ciopt_Delta_AC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Usp_UpdateIDLookup]",
							"storedProcedureParameters": {
								"LastID": {
									"value": {
										"value": "@variables('LastID')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"TableName": {
									"value": "DimCustomer",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseLinkedService",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LastID": {
						"type": "String"
					},
					"CurrentID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "UntilActivity"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T07:58:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/SELFHOSTNODE1_DIMCUSTOMER')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLPracticeDBDimCustomer')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UntilAgentJob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait For SQL Agent",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('SUCCESSED', variables('JobStatus'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Query MSDB",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "DECLARE @JOBNAME VARCHAR ( 50 ) = 'TEST'\n\n;WITH JOBINFO AS \n     (\n\t SELECT TOP 1 \n\t        1 AS 'ORDERING'\n\t\t    , CASE JOBHIS.RUN_STATUS\n\t\t\t      WHEN 0 THEN 'FAILED'\n\t\t\t\t  WHEN 1 THEN 'SUCCESSED'\n\t\t\t\t  WHEN 2 THEN 'RETRY'\n\t\t\t\t  WHEN 3 THEN 'CANCELLED'\n\t\t\t\t  ELSE 'UNKNOWN'\n\t\t\t  END AS 'JOBOUTCOME'\n\t\t\t  --, MSDB.DBO.AGENT_DATETIME( CAST( RUN_DATE AS VARCHAR( 15 ) ) , CAST( RUN_TIME  AS VARCHAR( 15 ) ))\t\t\t  \n\t   FROM [MSDB].[DBO].[SYSJOBHISTORY] JOBHIS ( NOLOCK )\n\t   JOIN [MSDB].[DBO].[SYSJOBS] JOBS ( NOLOCK )\n\t     ON JOBHIS.JOB_ID = JOBS.JOB_ID\n\t  WHERE JOBHIS.STEP_ID = 0\n\t    AND JOBS.NAME = @JOBNAME\n\t\tAND MSDB.DBO.AGENT_DATETIME( CAST( RUN_DATE AS VARCHAR( 15 ) ) , CAST( RUN_TIME  AS VARCHAR( 15 ) )) >= DATEADD( MINUTE, -5, GETDATE() )\n\t  ORDER BY JOBHIS.RUN_DATE DESC, JOBHIS.RUN_TIME DESC\n\t ), \n     RESULTS AS\n\t (\n\t SELECT 2 AS 'ORDERING'\n\t        , 'UNKNOWN' AS 'JOBOUTCOME'\n\t  UNION \n\t SELECT * \n\t   FROM JOBINFO\n\t )\n\t SELECT TOP 1 JOBOUTCOME FROM RESULTS ORDER BY ORDERING",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SELFHOSTNODE1_DIMCUSTOMER",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Wait",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "GetJobStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 20
									}
								},
								{
									"name": "GetJobStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Query MSDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "JobStatus",
										"value": {
											"value": "@string( activity('Query MSDB').output.firstRow.JOBOUTCOME)\n\n\n",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "ReportCompleted",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait For SQL Agent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @JOBNAME VARCHAR( 15 ) = 'TEST'\nSELECT TOP 1 \n\t--1 AS 'ORDERING'\n\t  JOBS.NAME AS JOBNAME\n\t  , CASE JOBHIS.RUN_STATUS\n\t\t\tWHEN 0 THEN 'FAILED'\n\t\t\tWHEN 1 THEN 'SUCCESSED'\n\t\t\tWHEN 2 THEN 'RETRY'\n\t\t\tWHEN 3 THEN 'CANCELLED'\n\t\t\tELSE 'UNKNOWN'\n\t\tEND AS 'JOBOUTCOME'\n        , MSDB.DBO.AGENT_DATETIME( CAST( RUN_DATE AS VARCHAR( 15 ) ) , CAST( RUN_TIME  AS VARCHAR( 15 ) )) AS COMPLETIONTIME\t \t  \nFROM [MSDB].[DBO].[SYSJOBHISTORY] JOBHIS ( NOLOCK )\nJOIN [MSDB].[DBO].[SYSJOBS] JOBS ( NOLOCK )\n\tON JOBHIS.JOB_ID = JOBS.JOB_ID\nWHERE JOBHIS.STEP_ID = 0\nAND JOBS.NAME = @JOBNAME\nAND MSDB.DBO.AGENT_DATETIME( CAST( RUN_DATE AS VARCHAR( 15 ) ) , CAST( RUN_TIME  AS VARCHAR( 15 ) )) >= DATEADD( MINUTE, -2, GETDATE() )\nORDER BY JOBHIS.RUN_DATE DESC, JOBHIS.RUN_TIME DESC",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SELFHOSTNODE1_DIMCUSTOMER",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UntilAgentJobOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"JobStatus": {
						"type": "String",
						"defaultValue": "NULL"
					}
				},
				"folder": {
					"name": "UntilActivity"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-06T07:58:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SELFHOSTNODE1_DIMCUSTOMER')]",
				"[concat(variables('factoryId'), '/datasets/UntilAgentJobOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquettest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquetoutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-19T10:43:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet1')]",
				"[concat(variables('factoryId'), '/datasets/Parquetoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT(pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_DataFlow_Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@utcnow()",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDB_SELFHOSTIR",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDB_SELFHOSTIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLJUNKTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NAME",
						"type": "nvarchar"
					},
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "JUNK"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLPracticeDBDimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UntilActivity"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "jsonfiletable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NAME",
						"type": "nvarchar"
					},
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "JUNK"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BadRows')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "adftutorial"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySinkFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySinkFileStore1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySourceFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "DataMovementLabBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataMovementLabBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySourceFileStore1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_INSIGHT_ADLS_BinaryFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_insight_ADLS_Data_Transfer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_insight_ADLS_Data_Transfer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_INSIGHT_ADLS_LegacyBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_insight_ADLS_DMZ_Legacy",
					"type": "LinkedServiceReference",
					"parameters": {
						"Account": {
							"value": "@dataset().Account",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Account": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_insight_ADLS_DMZ_Legacy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMovementLabBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Movement Lab"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT('DataMovementLab.',pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMovementLabDimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataMovementLabAzureSQL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Movement Lab"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataMovementLabAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp.txt",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inputEmp.txt",
						"container": "adfv2tutorial"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName|LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT(pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample4.json",
						"container": "input"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"feeds": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"location": {
										"type": "string"
									},
									"lng": {
										"type": "integer"
									},
									"lat": {
										"type": "integer"
									},
									"userId": {
										"type": "integer"
									},
									"name": {
										"type": "string"
									},
									"isdeleted": {
										"type": "boolean"
									},
									"profilePicture": {
										"type": "string"
									},
									"videoUrl": {
										"type": "null"
									},
									"images": {
										"type": "null"
									},
									"mediatype": {
										"type": "integer"
									},
									"imagePaths": {
										"type": "null"
									},
									"feedsComment": {
										"type": "null"
									},
									"commentCount": {
										"type": "integer"
									},
									"multiMedia": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												},
												"description": {
													"type": "null"
												},
												"url": {
													"type": "string"
												},
												"mediatype": {
													"type": "integer"
												},
												"likeCount": {
													"type": "integer"
												},
												"place": {
													"type": "null"
												},
												"createAt": {
													"type": "string"
												}
											}
										}
									},
									"likeDislike": {
										"type": "object",
										"properties": {
											"likes": {
												"type": "integer"
											},
											"dislikes": {
												"type": "integer"
											},
											"userAction": {
												"type": "integer"
											}
										}
									},
									"createdAt": {
										"type": "string"
									},
									"code": {
										"type": "integer"
									},
									"msg": {
										"type": "null"
									}
								}
							}
						},
						"totalFeed": {
							"type": "integer"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParametersExpressionsLab')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParametersExpressionsLab"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inputEmp.txt",
						"container": "adfv2tutorial"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParametersExpressionsLab2Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ParametersExpressionsLab"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "adfv2tutorial"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParametersExpressionsLab2Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ParametersExpressionsLab"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*.csv",
						"container": "adftutorial"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "part-1661378449-294a2394-8551-42d8-8597-3ef1c9682107-01.parquet",
						"container": "parquetinput"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "__operation_type",
						"type": "BINARY"
					},
					{
						"name": "__sequence_number",
						"type": "INT64"
					},
					{
						"name": "__timestamp",
						"type": "INT64"
					},
					{
						"name": "MANDT",
						"type": "BINARY"
					},
					{
						"name": "BUKRS",
						"type": "BINARY"
					},
					{
						"name": "LIFNR",
						"type": "BINARY"
					},
					{
						"name": "UMSKS",
						"type": "BINARY"
					},
					{
						"name": "UMSKZ",
						"type": "BINARY"
					},
					{
						"name": "AUGDT",
						"type": "INT32"
					},
					{
						"name": "AUGBL",
						"type": "BINARY"
					},
					{
						"name": "ZUONR",
						"type": "BINARY"
					},
					{
						"name": "GJAHR",
						"type": "BINARY"
					},
					{
						"name": "BELNR",
						"type": "BINARY"
					},
					{
						"name": "BUZEI",
						"type": "BINARY"
					},
					{
						"name": "BUDAT",
						"type": "INT32"
					},
					{
						"name": "BLDAT",
						"type": "INT32"
					},
					{
						"name": "CPUDT",
						"type": "INT32"
					},
					{
						"name": "WAERS",
						"type": "BINARY"
					},
					{
						"name": "XBLNR",
						"type": "BINARY"
					},
					{
						"name": "BLART",
						"type": "BINARY"
					},
					{
						"name": "MONAT",
						"type": "BINARY"
					},
					{
						"name": "BSCHL",
						"type": "BINARY"
					},
					{
						"name": "ZUMSK",
						"type": "BINARY"
					},
					{
						"name": "SHKZG",
						"type": "BINARY"
					},
					{
						"name": "GSBER",
						"type": "BINARY"
					},
					{
						"name": "MWSKZ",
						"type": "BINARY"
					},
					{
						"name": "DMBTR",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "WRBTR",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "MWSTS",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "WMWST",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "BDIFF",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "BDIF2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "SGTXT",
						"type": "BINARY"
					},
					{
						"name": "PROJN",
						"type": "BINARY"
					},
					{
						"name": "AUFNR",
						"type": "BINARY"
					},
					{
						"name": "ANLN1",
						"type": "BINARY"
					},
					{
						"name": "ANLN2",
						"type": "BINARY"
					},
					{
						"name": "EBELN",
						"type": "BINARY"
					},
					{
						"name": "EBELP",
						"type": "BINARY"
					},
					{
						"name": "SAKNR",
						"type": "BINARY"
					},
					{
						"name": "HKONT",
						"type": "BINARY"
					},
					{
						"name": "FKONT",
						"type": "BINARY"
					},
					{
						"name": "FILKD",
						"type": "BINARY"
					},
					{
						"name": "ZFBDT",
						"type": "INT32"
					},
					{
						"name": "ZTERM",
						"type": "BINARY"
					},
					{
						"name": "ZBD1T",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "ZBD2T",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "ZBD3T",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "ZBD1P",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "ZBD2P",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "SKFBT",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "SKNTO",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "WSKTO",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "ZLSCH",
						"type": "BINARY"
					},
					{
						"name": "ZLSPR",
						"type": "BINARY"
					},
					{
						"name": "ZBFIX",
						"type": "BINARY"
					},
					{
						"name": "HBKID",
						"type": "BINARY"
					},
					{
						"name": "BVTYP",
						"type": "BINARY"
					},
					{
						"name": "REBZG",
						"type": "BINARY"
					},
					{
						"name": "REBZJ",
						"type": "BINARY"
					},
					{
						"name": "REBZZ",
						"type": "BINARY"
					},
					{
						"name": "SAMNR",
						"type": "BINARY"
					},
					{
						"name": "ZOLLT",
						"type": "BINARY"
					},
					{
						"name": "ZOLLD",
						"type": "INT32"
					},
					{
						"name": "LZBKZ",
						"type": "BINARY"
					},
					{
						"name": "LANDL",
						"type": "BINARY"
					},
					{
						"name": "DIEKZ",
						"type": "BINARY"
					},
					{
						"name": "MANSP",
						"type": "BINARY"
					},
					{
						"name": "MSCHL",
						"type": "BINARY"
					},
					{
						"name": "MADAT",
						"type": "INT32"
					},
					{
						"name": "MANST",
						"type": "BINARY"
					},
					{
						"name": "MABER",
						"type": "BINARY"
					},
					{
						"name": "XNETB",
						"type": "BINARY"
					},
					{
						"name": "XANET",
						"type": "BINARY"
					},
					{
						"name": "XCPDD",
						"type": "BINARY"
					},
					{
						"name": "XESRD",
						"type": "BINARY"
					},
					{
						"name": "XZAHL",
						"type": "BINARY"
					},
					{
						"name": "MWSK1",
						"type": "BINARY"
					},
					{
						"name": "DMBT1",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "WRBT1",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "MWSK2",
						"type": "BINARY"
					},
					{
						"name": "DMBT2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "WRBT2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "MWSK3",
						"type": "BINARY"
					},
					{
						"name": "DMBT3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "WRBT3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "QSSKZ",
						"type": "BINARY"
					},
					{
						"name": "QSSHB",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "QBSHB",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "BSTAT",
						"type": "BINARY"
					},
					{
						"name": "ANFBN",
						"type": "BINARY"
					},
					{
						"name": "ANFBJ",
						"type": "BINARY"
					},
					{
						"name": "ANFBU",
						"type": "BINARY"
					},
					{
						"name": "VBUND",
						"type": "BINARY"
					},
					{
						"name": "REBZT",
						"type": "BINARY"
					},
					{
						"name": "STCEG",
						"type": "BINARY"
					},
					{
						"name": "EGBLD",
						"type": "BINARY"
					},
					{
						"name": "EGLLD",
						"type": "BINARY"
					},
					{
						"name": "QSZNR",
						"type": "BINARY"
					},
					{
						"name": "QSFBT",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "XINVE",
						"type": "BINARY"
					},
					{
						"name": "PROJK",
						"type": "BINARY"
					},
					{
						"name": "FIPOS",
						"type": "BINARY"
					},
					{
						"name": "NPLNR",
						"type": "BINARY"
					},
					{
						"name": "AUFPL",
						"type": "BINARY"
					},
					{
						"name": "APLZL",
						"type": "BINARY"
					},
					{
						"name": "XEGDR",
						"type": "BINARY"
					},
					{
						"name": "DMBE2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMBE3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMB21",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMB22",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMB23",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMB31",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMB32",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "DMB33",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "MWST2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "MWST3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "SKNT2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "SKNT3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "BDIF3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "XRAGL",
						"type": "BINARY"
					},
					{
						"name": "RSTGR",
						"type": "BINARY"
					},
					{
						"name": "UZAWE",
						"type": "BINARY"
					},
					{
						"name": "KOSTL",
						"type": "BINARY"
					},
					{
						"name": "LNRAN",
						"type": "BINARY"
					},
					{
						"name": "XSTOV",
						"type": "BINARY"
					},
					{
						"name": "KZBTR",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "XREF1",
						"type": "BINARY"
					},
					{
						"name": "XREF2",
						"type": "BINARY"
					},
					{
						"name": "XARCH",
						"type": "BINARY"
					},
					{
						"name": "PSWSL",
						"type": "BINARY"
					},
					{
						"name": "PSWBT",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "IMKEY",
						"type": "BINARY"
					},
					{
						"name": "ZEKKN",
						"type": "BINARY"
					},
					{
						"name": "FISTL",
						"type": "BINARY"
					},
					{
						"name": "GEBER",
						"type": "BINARY"
					},
					{
						"name": "DABRZ",
						"type": "INT32"
					},
					{
						"name": "XNEGP",
						"type": "BINARY"
					},
					{
						"name": "EMPFB",
						"type": "BINARY"
					},
					{
						"name": "PRCTR",
						"type": "BINARY"
					},
					{
						"name": "XREF3",
						"type": "BINARY"
					},
					{
						"name": "DTWS1",
						"type": "BINARY"
					},
					{
						"name": "DTWS2",
						"type": "BINARY"
					},
					{
						"name": "DTWS3",
						"type": "BINARY"
					},
					{
						"name": "DTWS4",
						"type": "BINARY"
					},
					{
						"name": "XPYPR",
						"type": "BINARY"
					},
					{
						"name": "KIDNO",
						"type": "BINARY"
					},
					{
						"name": "PYCUR",
						"type": "BINARY"
					},
					{
						"name": "PYAMT",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "BUPLA",
						"type": "BINARY"
					},
					{
						"name": "SECCO",
						"type": "BINARY"
					},
					{
						"name": "PPDIFF",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PPDIF2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PPDIF3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PENLC1",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PENLC2",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PENLC3",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PENFC",
						"type": "FIXED_LEN_BYTE_ARRAY"
					},
					{
						"name": "PENDAYS",
						"type": "INT32"
					},
					{
						"name": "PENRC",
						"type": "BINARY"
					},
					{
						"name": "VERTT",
						"type": "BINARY"
					},
					{
						"name": "VERTN",
						"type": "BINARY"
					},
					{
						"name": "VBEWA",
						"type": "BINARY"
					},
					{
						"name": "KBLNR",
						"type": "BINARY"
					},
					{
						"name": "KBLPOS",
						"type": "BINARY"
					},
					{
						"name": "GRANT_NBR",
						"type": "BINARY"
					},
					{
						"name": "GMVKZ",
						"type": "BINARY"
					},
					{
						"name": "SRTYPE",
						"type": "BINARY"
					},
					{
						"name": "LOTKZ",
						"type": "BINARY"
					},
					{
						"name": "ZINKZ",
						"type": "BINARY"
					},
					{
						"name": "FKBER",
						"type": "BINARY"
					},
					{
						"name": "INTRENO",
						"type": "BINARY"
					},
					{
						"name": "PPRCT",
						"type": "BINARY"
					},
					{
						"name": "BUZID",
						"type": "BINARY"
					},
					{
						"name": "AUGGJ",
						"type": "BINARY"
					},
					{
						"name": "HKTID",
						"type": "BINARY"
					},
					{
						"name": "BUDGET_PD",
						"type": "BINARY"
					},
					{
						"name": "KONTT",
						"type": "BINARY"
					},
					{
						"name": "KONTL",
						"type": "BINARY"
					},
					{
						"name": "UEBGDAT",
						"type": "INT32"
					},
					{
						"name": "VNAME",
						"type": "BINARY"
					},
					{
						"name": "EGRUP",
						"type": "BINARY"
					},
					{
						"name": "BTYPE",
						"type": "BINARY"
					},
					{
						"name": "PROPMANO",
						"type": "BINARY"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquetoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerQueryBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SELFHOSTNODE1_DIMCUSTOMER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SELFHOSTNODE1_AdventureWorksDW2016",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UntilActivity"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SELFHOSTNODE1_AdventureWorksDW2016')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UntilAgentJobOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "UntilActivity"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT('JobStatus',pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SELFHOSTNODE1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "incrementalcopy"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SELFHOSTNODE1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_source_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SELFHOSTNODE1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "incrementalcopy"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "data_source_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SELFHOSTNODE1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incrementalcopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "incrementalcopy"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT('Incremental-', pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"container": "adftutorial"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetoutputcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "twadfpracticestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/twadfpracticestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSGen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage1_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageAuthenticationKey')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageAuthenticationKey_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDB_SELFHOSTIR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSQLDB_SELFHOSTIR_connectionString')]"
				},
				"connectVia": {
					"referenceName": "selfhostHA",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostHA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDBwithexpression')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"server": {
						"type": "string",
						"defaultValue": "twadfpractice.database.windows.net"
					},
					"database": {
						"type": "string",
						"defaultValue": "practice001"
					},
					"user": {
						"type": "string",
						"defaultValue": "DBA"
					},
					"pw": {
						"type": "string",
						"defaultValue": "Laowang001"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSQLDBwithexpression_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMovementLabAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DataMovementLabAzureSQL_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "test"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMovementLabBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('DataMovementLabBlobStorage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HDILabBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('HDILabBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_insight_ADLS_DMZ_Legacy')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Account": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_insight_ADLS_DMZ_Legacy_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "devinsightIRAzure02",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/devinsightIRAzure02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_insight_ADLS_Data_Transfer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "19251001devinsightxfer01",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_insight_ADLS_Data_Transfer_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "devinsightIRAzure02",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/devinsightIRAzure02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LocalSQLPractice2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LocalSQLPractice2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/New REST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('New REST_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Accept": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrivateEndpoint')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('PrivateEndpoint_connectionString')]"
				},
				"connectVia": {
					"referenceName": "CentralUSIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/CentralUSIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SELFHOSTNODE1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SELFHOSTNODE1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "selfhostHA",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostHA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SELFHOSTNODE1_AdventureWorksDW2016')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SELFHOSTNODE1_AdventureWorksDW2016_connectionString')]"
				},
				"connectVia": {
					"referenceName": "PrivateEndPoint",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/PrivateEndPoint')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SapTable1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SapTable",
				"typeProperties": {
					"clientId": "[parameters('SapTable1_properties_typeProperties_clientId')]",
					"sncMode": false,
					"userName": "[parameters('SapTable1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SapTable1_password')]"
					},
					"server": "[parameters('SapTable1_properties_typeProperties_server')]",
					"systemNumber": "[parameters('SapTable1_properties_typeProperties_systemNumber')]"
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sftp1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp1_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": false,
					"hostKeyFingerprint": "[parameters('Sftp1_properties_typeProperties_hostKeyFingerprint')]",
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerLinkedService_connectionString')]",
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				},
				"connectVia": {
					"referenceName": "TutorialIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/TutorialIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('TEST_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Content-Type": {
							"type": "SecureString",
							"value": "**********"
						},
						"Content-Length": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalakestorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalakestorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('datalakestorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/twadfpracticestorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('twadfpracticestorage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/twadfpracticestorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('twadfpracticestorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunEveryMinute')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-06-24T11:25:00",
						"endTime": "2021-06-25T11:30:00",
						"timeZone": "China Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schedule Trigger Every One Min')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-07-07T06:48:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling Window Test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyJsonfilefromBlobtoAzureSQL",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-06-28T05:15:00Z",
					"endTime": "2021-06-29T05:45:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyJsonfilefromBlobtoAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling Window Trigger Every One Min')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "UntilAgentJob",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-07-07T06:57:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/UntilAgentJob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "TriggerLab",
						"type": "PipelineReference"
					},
					"parameters": {
						"GetTime": "[parameters('Tumbling_properties_pipeline_parameters_GetTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2021-07-07T07:53:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TriggerLab')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureIRWithVnet')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CentralUSIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewAutoResolve')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrivateEndPoint')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TutorialIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/devinsightIRAzure02')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhostHA')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLPracticeDBDimCustomerpowerquery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "AzureSQLPracticeDBDimCustomer",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSQLPracticeDBDimCustomer",
							"dataset": {
								"referenceName": "AzureSQLPracticeDBDimCustomer",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared AzureSQLPracticeDBDimCustomer = let\r\n  AdfDoc = Sql.Database(\"twadfpractice.database.windows.net\", \"Practice001\", [CreateNavigationProperties = false]),\r\n  InputTable = AdfDoc{[Schema = \"dbo\", Item = \"DimCustomer\"]}[Data]\r\nin\r\n  InputTable;\r\nshared UserQuery = let\r\n  Source = AzureSQLPracticeDBDimCustomer,\r\n  #\"Filtered rows\" = Table.SelectRows(Source, each ([GeographyKey] = 8))\r\nin\r\n  #\"Filtered rows\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLPracticeDBDimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorHandling')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSQLJUNKTable",
								"type": "DatasetReference"
							},
							"name": "AzureSQLDBTable"
						},
						{
							"dataset": {
								"referenceName": "BadRows",
								"type": "DatasetReference"
							},
							"name": "BadRows"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "GoodRows"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 derive(movie = toInteger(movie)) ~> DerivedColumn1\nDerivedColumn1 split(length(title) <= 5,\n\tdisjoint: false) ~> GoodRows@(GoodRows, BadRows)\nGoodRows@GoodRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tNAME as string,\n\t\tID as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\toutputRejectedData: true,\n\tmapColumn(\n\t\tNAME = title,\n\t\tID = movie\n\t)) ~> AzureSQLDBTable\nGoodRows@BadRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(\"BadRows_{currentDate()}.txt\")],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> BadRows"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQLJUNKTable')]",
				"[concat(variables('factoryId'), '/datasets/BadRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "Sink"
						},
						{
							"dataset": {
								"referenceName": "AzureBlobStorage_DataFlow_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterYears"
						},
						{
							"name": "AggregateComedyRatings"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tparameter1 as date (currentDate())\n}\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MoviesDB\nMoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FilterYears\nFilterYears aggregate(groupBy(year,\n\t\ttitle),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRatings\nAggregateComedyRatings, MoviesDB join(AggregateComedyRatings@title == MoviesDB@title\n\t&& AggregateComedyRatings@year == MoviesDB@year,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tmovie,\n\t\tgenres,\n\t\ttitle = AggregateComedyRatings@title,\n\t\tyear = AggregateComedyRatings@year,\n\t\tRating,\n\t\tAverageComedyRating,\n\t\t{Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAggregateComedyRatings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(\"{currentDate()} .txt\"\r\n)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('roundRobin', 2)) ~> Sink\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(\"JoinResult_{currentDate()}.txt\")],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobStorage_DataFlow_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabase278-serverless')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabase278-serverless_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabase278-serverless_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/Private1')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('Private1_properties_privateLinkResourceId')]",
				"groupId": "[parameters('Private1_properties_groupId')]",
				"fqdns": "[parameters('Private1_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/TWTEST001')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('TWTEST001_properties_privateLinkResourceId')]",
				"groupId": "[parameters('TWTEST001_properties_groupId')]",
				"fqdns": "[parameters('TWTEST001_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/twadfpracticeprivatepoint')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('twadfpracticeprivatepoint_properties_privateLinkResourceId')]",
				"groupId": "[parameters('twadfpracticeprivatepoint_properties_groupId')]",
				"fqdns": "[parameters('twadfpracticeprivatepoint_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}